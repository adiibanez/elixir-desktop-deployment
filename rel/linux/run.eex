#!/bin/bash
set -e
pushd `dirname $0` > /dev/null
ulimit -n 10000
<%= if Desktop.Deployment.Tooling.os() == MacOS do %>
export RELEASE_ROOT=`pwd -P`/../Resources
if [ -z "$1" ]; then
    set -- start "$@"
fi
<% else %>
export RELEASE_ROOT=`pwd -P`
if [ -z "$1" ]; then
    set -- daemon "$@"
fi
<% end %>

export GDK_BACKEND=x11


# https://github.com/reflex-frp/reflex-platform/issues/735
export WEBKIT_DISABLE_COMPOSITING_MODE=1
export RELEASE_VSN="${RELEASE_VSN:-"$(cut -d' ' -f2 "$RELEASE_ROOT/releases/start_erl.data")"}"
export RELEASE_COMMAND="$1"
shift
export RELEASE_MODE="${RELEASE_MODE:-"embedded"}"

REL_VSN_DIR="$RELEASE_ROOT/releases/$RELEASE_VSN"

# Replacement for . env.sh
export RELEASE_NAME="<%= @release.name %>"
<%= if Desktop.Deployment.Tooling.os() == MacOS do %>
export HEART_COMMAND="open -a <%= @package.name %> -W"
<% else %>
export HEART_COMMAND="$RELEASE_ROOT/<%= @package.name %> $RELEASE_COMMAND"
<% end %>
export ELIXIR_ERL_OPTIONS="+sssdio 128 +sbwt none -heart -kernel inet_dist_use_interface {127,0,0,1} <%= @package.elixir_erl_options %> "
export ERL_EPMD_ADDRESS=127.0.0.1
export RELEASE_DISTRIBUTION=name
export RELEASE_NODE=<%= @package.app_name %>_$$@127.0.0.1
export LD_LIBRARY_PATH="$RELEASE_ROOT/lib/<%= @package.app_name %>-<%= @release.version %>/priv/"
export LD_PRELOAD="$RELEASE_ROOT/lib/<%= @package.app_name %>-<%= @release.version %>/priv/libredirector.so"
export GIO_MODULE_DIR="$RELEASE_ROOT/lib/<%= @package.app_name %>-<%= @release.version %>/priv/gio/modules"
export GDK_PIXBUF_MODULE_FILE="$RELEASE_ROOT/lib/<%= @package.app_name %>-<%= @release.version %>/priv/pixbuf.cache"
export GST_PLUGIN_PATH="$RELEASE_ROOT/lib/<%= @package.app_name %>-<%= @release.version %>/priv/gst/modules"
export GST_PLUGIN_SYSTEM_PATH="$RELEASE_ROOT/lib/<%= @package.app_name %>-<%= @release.version %>/priv/gst/modules"
export GST_REGISTRY="$RELEASE_ROOT/lib/<%= @package.app_name %>-<%= @release.version %>/priv/gst/registry.cache"
export GTK_IM_MODULE_FILE="$RELEASE_ROOT/lib/<%= @package.app_name %>-<%= @release.version %>/priv/immodules.cache"
export WX_APP_ICON="$RELEASE_ROOT/lib/<%= @package.app_name %>-<%= @release.version %>/priv/icon.png"
export WX_APP_TITLE=<%= @package.name %>
# this prevents wxWidgets from loading any (and wrong versions) of web-extensions
export WXPREFIX=

<%= for {key, value} <- @package.env do %>
export <%= key %>="<%= value %>"
<% end %>
# End of . env.sh

export RELEASE_COOKIE="${RELEASE_COOKIE:-"$(cat "$RELEASE_ROOT/releases/COOKIE")"}"
export RELEASE_TMP="${RELEASE_TMP:-"$RELEASE_ROOT/tmp"}"
export RELEASE_VM_ARGS="${RELEASE_VM_ARGS:-"$REL_VSN_DIR/vm.args"}"
export RELEASE_DISTRIBUTION="${RELEASE_DISTRIBUTION:-"sname"}"
export RELEASE_BOOT_SCRIPT="${RELEASE_BOOT_SCRIPT:-"start"}"
export RELEASE_BOOT_SCRIPT_CLEAN="${RELEASE_BOOT_SCRIPT_CLEAN:-"start_clean"}"

rand () {
  od -t xS -N 2 -A n /dev/urandom | tr -d " \n"
}

release_distribution () {
  case $RELEASE_DISTRIBUTION in
    none)
      ;;

    name | sname)
      echo "--$RELEASE_DISTRIBUTION $1"
      ;;

    *)
      echo "ERROR: Expected sname, name, or none in RELEASE_DISTRIBUTION, got: $RELEASE_DISTRIBUTION" >&2
      exit 1
      ;;
  esac
}

rpc () {
  export ELIXIR_ERL_OPTIONS=${ELIXIR_ERL_OPTIONS//-heart/}
  export EPMD=`find . -name epmd -type f | tail -n1`
  export RELEASE_NODE=`$EPMD -names | grep "name <%= @package.app_name %>" | grep -oE "<%= @package.app_name %>_[0-9]+"`@127.0.0.1
  exec "$REL_VSN_DIR/elixir" \
       --hidden --cookie "$RELEASE_COOKIE" \
       $(release_distribution "rpc-$(rand)-$RELEASE_NODE") \
       --boot "$REL_VSN_DIR/$RELEASE_BOOT_SCRIPT_CLEAN" \
       --boot-var RELEASE_LIB "$RELEASE_ROOT/lib" \
       --rpc-eval "$RELEASE_NODE" "$1"
}

start () {
  export_release_sys_config
  REL_EXEC="$1"
  shift
  exec "$REL_VSN_DIR/$REL_EXEC" \
       --cookie "$RELEASE_COOKIE" \
       $(release_distribution "$RELEASE_NODE") \
       --erl "-mode $RELEASE_MODE" \
       --erl-config "$RELEASE_SYS_CONFIG" \
       --boot "$REL_VSN_DIR/$RELEASE_BOOT_SCRIPT" \
       --boot-var RELEASE_LIB "$RELEASE_ROOT/lib" \
       --vm-args "$RELEASE_VM_ARGS" "$@"
}

export_release_sys_config () {
  DEFAULT_SYS_CONFIG="${RELEASE_SYS_CONFIG:-"$REL_VSN_DIR/sys"}"

  if grep -q "RUNTIME_CONFIG=true" "$DEFAULT_SYS_CONFIG.config"; then
    RELEASE_SYS_CONFIG="$RELEASE_TMP/$RELEASE_NAME-$RELEASE_VSN-$(date +%Y%m%d%H%M%S)-$(rand).runtime"

    (mkdir -p "$RELEASE_TMP" && cat "$DEFAULT_SYS_CONFIG.config" >"$RELEASE_SYS_CONFIG.config") || (
      echo "ERROR: Cannot start release because it could not write $RELEASE_SYS_CONFIG.config" >&2
      exit 1
    )
  else
    RELEASE_SYS_CONFIG="$DEFAULT_SYS_CONFIG"
  fi

  export RELEASE_SYS_CONFIG
}

case $RELEASE_COMMAND in
  start)
    start "elixir" --no-halt "$@"
    ;;

  start_iex)

    start "iex" --werl "$@"
    ;;

  daemon)
    start "elixir" --no-halt --pipe-to "${RELEASE_TMP}/pipe" "${RELEASE_TMP}/log" "$@"
    ;;

  daemon_iex)
    start "iex" --pipe-to "${RELEASE_TMP}/pipe" "${RELEASE_TMP}/log" "$@"
    ;;

  eval)
    if [ -z "$1" ]; then
      echo "ERROR: EVAL expects an expression as argument" >&2
      exit 1
    fi

    export_release_sys_config
    exec "$REL_VSN_DIR/elixir" \
       --cookie "$RELEASE_COOKIE" \
       --erl-config "$RELEASE_SYS_CONFIG" \
       --boot "$REL_VSN_DIR/$RELEASE_BOOT_SCRIPT_CLEAN" \
       --boot-var RELEASE_LIB "$RELEASE_ROOT/lib" \
       --vm-args "$RELEASE_VM_ARGS" --eval "$1"
    ;;

  remote)
    export ELIXIR_ERL_OPTIONS=${ELIXIR_ERL_OPTIONS//-heart/}
    export EPMD=`find . -name epmd -type f | tail -n1`
    export RELEASE_NODE=`$EPMD -names | grep "name <%= @package.app_name %>" | grep -oE "<%= @package.app_name %>_[0-9]+"`@127.0.0.1
    exec "$REL_VSN_DIR/iex" \
         --werl --hidden --cookie "$RELEASE_COOKIE" \
         $(release_distribution "rem-$(rand)-$RELEASE_NODE") \
         --boot "$REL_VSN_DIR/$RELEASE_BOOT_SCRIPT_CLEAN" \
         --boot-var RELEASE_LIB "$RELEASE_ROOT/lib" \
         --remsh "$RELEASE_NODE"
    ;;

  rpc)
    if [ -z "$1" ]; then
      echo "ERROR: RPC expects an expression as argument" >&2
      exit 1
    fi
    rpc "$1"
    ;;

  restart|stop)
    rpc "System.$RELEASE_COMMAND()"
    ;;

  pid)
    rpc "IO.puts System.pid()"
    ;;

  version)
    echo "$RELEASE_NAME $RELEASE_VSN"
    ;;

  *)
    echo "Usage: $(basename "$0") COMMAND [ARGS]

The known commands are:

    start          Starts the system
    start_iex      Starts the system with IEx attached
    daemon         Starts the system as a daemon
    daemon_iex     Starts the system as a daemon with IEx attached
    eval \"EXPR\"    Executes the given expression on a new, non-booted system
    rpc \"EXPR\"     Executes the given expression remotely on the running system
    remote         Connects to the running system via a remote shell
    restart        Restarts the running system via a remote command
    stop           Stops the running system via a remote command
    pid            Prints the operating system PID of the running system via a remote command
    version        Prints the release name and version to be booted
" >&2

    if [ -n "$RELEASE_COMMAND" ]; then
      echo "ERROR: Unknown command $RELEASE_COMMAND" >&2
      exit 1
    fi
    ;;
esac
